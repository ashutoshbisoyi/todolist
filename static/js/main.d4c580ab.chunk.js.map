{"version":3,"sources":["ToDoList.jsx","App.js","serviceWorker.js","index.js"],"names":["ToDoList","props","useState","lineStatus","updateLineStatus","className","onClick","style","textDecoration","text","onSelect","id","App","itemName","updateItemName","itemList","updateItemList","deleteItem","oldItems","filter","itemValue","itemIndex","DigitalClock","time","Date","toLocaleTimeString","updateCurrentTime","setInterval","TodayDate","toDateString","src","placeholder","name","value","onChange","event","target","alert","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6LA2CeA,EAzCE,SAACC,GAAW,IAAD,EACaC,oBAAS,GADtB,mBACnBC,EADmB,KACPC,EADO,KAK1B,OACE,oCACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,sBAAsBC,QAP3B,WACdF,GAAiB,OAQb,yBAAKC,UAAU,mBACb,wBAAIE,MAAO,CAAEC,eAAgBL,EAAa,eAAiB,UACxDF,EAAMQ,OAGX,yBAAKJ,UAAU,kBACb,uBACEA,UAAU,eACVC,QAAS,WACPL,EAAMS,SAAST,EAAMU,W,iBCuFpBC,MAvGf,WAAgB,IAAD,EACsBV,mBAAS,IAD/B,mBACNW,EADM,KACIC,EADJ,OAGsBZ,mBAAS,IAH/B,mBAGNa,EAHM,KAGIC,EAHJ,KA4BPC,EAAa,SAACN,GAClBK,GAAe,SAACE,GACd,OAAOA,EAASC,QAAO,SAACC,EAAWC,GACjC,OAAOA,IAAcV,SAMrBW,EAAe,WACnB,IAAIC,GAAO,IAAIC,MAAOC,qBADG,EAEgBvB,mBAASqB,GAFzB,mBAELG,GAFK,WAOzB,OADAC,aAHoB,WAClBD,GAAkB,IAAIF,MAAOC,wBAEN,KAClBF,GAGHK,EAAY,WAEhB,OADW,IAAIJ,MAAOK,gBAIxB,OACE,oCACE,6BAASxB,UAAU,yBACjB,yBAAKA,UAAU,cACb,6CACA,gCACE,yBAAKyB,IAAI,mCACT,yBAAKzB,UAAU,sBACb,2BACE,kBAACuB,EAAD,OAEF,2BACE,kBAACN,EAAD,SAIN,yBAAKjB,UAAU,eACb,yBAAKA,UAAU,mBACb,2BACE0B,YAAY,0BACZC,KAAK,OACLC,MAAOpB,EACPqB,SAnEM,SAACC,GACnBrB,EAAeqB,EAAMC,OAAOH,WAqEpB,yBAAK5B,UAAU,kBACb,4BAAQC,QAjEJ,WAEE,IAAZO,EACFwB,MAAM,oBAENrB,GAAe,SAACE,GACd,MAAM,GAAN,mBAAWA,GAAX,CAAqBL,OAGzBC,EAAe,MAyDH,uBAAGT,UAAU,mBAInB,yBAAKA,UAAU,YACb,4BACGU,EAASuB,KAAI,SAAClB,EAAWC,GACxB,OACE,kBAAC,EAAD,CACEZ,KAAMW,EACNmB,IAAKlB,EACLV,GAAIU,EACJX,SAAUO,aCrFVuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d4c580ab.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst ToDoList = (props) => {\r\n  const [lineStatus, updateLineStatus] = useState(false);\r\n  const cutItem = () => {\r\n    updateLineStatus(true);\r\n  };\r\n  return (\r\n    <>\r\n      <div className='row item-row'>\r\n        <div className='col-2 col-md-1'>\r\n          <i className='fas fa-minus-circle' onClick={cutItem}></i>\r\n        </div>\r\n        <div className='col-8 col-md-10'>\r\n          <li style={{ textDecoration: lineStatus ? 'line-through' : 'none ' }}>\r\n            {props.text}\r\n          </li>\r\n        </div>\r\n        <div className='col-2 col-md-1'>\r\n          <i\r\n            className='fas fa-trash'\r\n            onClick={() => {\r\n              props.onSelect(props.id);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      </div>\r\n      {/* <div className='item-row'>\r\n        <i className='fas fa-minus-circle' onClick={cutItem}></i>\r\n        <li style={{ textDecoration: lineStatus ? 'line-through' : 'none ' }}>\r\n          {props.text}\r\n        </li>\r\n        <i\r\n          className='fas fa-trash'\r\n          onClick={() => {\r\n            props.onSelect(props.id);\r\n          }}\r\n        ></i>\r\n      </div> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n","import React, { useState } from 'react';\nimport ToDoList from './ToDoList';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/bootstrap/dist/js/bootstrap.min.js';\nimport $ from 'jquery';\n\nfunction App() {\n  const [itemName, updateItemName] = useState('');\n  //a hook is called to change the state of text what is getting typed in the input field\n  const [itemList, updateItemList] = useState([]);\n  //this hook is called to change the state of itemList array\n  //useState([]) means it is a array from starting\n\n  const changeEvent = (event) => {\n    updateItemName(event.target.value);\n  };\n  //changeEvent is called whenever something is typed in the input field\n  //with event.target.value we are fetching the value and updating that to itemName\n\n  const addItem = () => {\n    //we are applying if condition to avoid blank input\n    if (itemName == '') {\n      alert('Add a item first');\n    } else {\n      updateItemList((oldItems) => {\n        return [...oldItems, itemName];\n      });\n    }\n    updateItemName(''); //to reset the input field value after submitting\n  };\n  //addItem is called when + button is pressed and itemList is getting updated through updateItemList\n  //we are passing oldItems(we can write anything) to get the existing items(items of array here)\n  //in return we are sending new item i.e. itemName alog with existing items i.e. ...oldItem (spread operator is used here)\n\n  const deleteItem = (id) => {\n    updateItemList((oldItems) => {\n      return oldItems.filter((itemValue, itemIndex) => {\n        return itemIndex !== id;\n      });\n    });\n  };\n\n  //time\n  const DigitalClock = () => {\n    let time = new Date().toLocaleTimeString();\n    const [currentTime, updateCurrentTime] = useState(time);\n    const refreshTime = () => {\n      updateCurrentTime(new Date().toLocaleTimeString());\n    };\n    setInterval(refreshTime, 1000);\n    return time;\n  };\n  //date\n  const TodayDate = () => {\n    let date = new Date().toDateString();\n    return date;\n  };\n\n  return (\n    <>\n      <section className='flex-div todo-section'>\n        <div className='center-div'>\n          <h1>My ToDo List </h1>\n          <figure>\n            <img src='https://picsum.photos/1000/200' />\n            <div className='dateTime-container'>\n              <p>\n                <TodayDate />\n              </p>\n              <p>\n                <DigitalClock />\n              </p>\n            </div>\n          </figure>\n          <div className='row top-div'>\n            <div className='col-md-10 col-9'>\n              <input\n                placeholder='Add a item to your List'\n                name='item'\n                value={itemName}\n                onChange={changeEvent}\n              />\n            </div>\n            <div className='col-md-2 col-3'>\n              <button onClick={addItem}>\n                <i className='fas fa-plus' />\n              </button>\n            </div>\n          </div>\n          <div className='list-div'>\n            <ol>\n              {itemList.map((itemValue, itemIndex) => {\n                return (\n                  <ToDoList\n                    text={itemValue}\n                    key={itemIndex}\n                    id={itemIndex}\n                    onSelect={deleteItem}\n                  />\n                );\n              })}\n            </ol>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}